makeSteinerTree

Uses a graph C++ class with adjacency list to store information on edges. It is assumed that edges are directed. Then the graph is incoded in an undirected manner. The closest paths are generated to each node of interest and a Steiner tree is formed.

Required Files:
Graph.cpp - Contains the C++ graph object
Framework.cpp - Contains subroutine for making Steiner tree. 


Compilation: 
Use all C++ template library objects and c++11 script. To compile run "make makeSteinerTree"

Inputs:
./makeSteinerTree <network_file> <interesting_node_list> <start_node> <output_file>
./makeSteinerTree Input/output_net_0_8_sorted.txt Input/Mac_A_test.txt AFUA_1G13190 Outfile/out

network_file: Contains a list of edges needed for a graph. Each line contain a source node fallowed by a target node. Nodes can be labeled as string. example: Input/output_net_0_8_sorted.txt

interesting_node_list: A file that contains a list of nodes in network file. The program will make a minimal spanning tree to cover these nodes.

start node: The output of the steiner tree is an approximation. It matters what node you start with. 

output:an output file prefix.


Outputs:
out_adjacency_list.txt: A file containing an adjacency list for the network.
out_edge_list_names.txt: List of edges that in the steiner tree. (Direction corresponds to input network file. 
out_node_list.txt: List of nodes in steiner tree.
 
