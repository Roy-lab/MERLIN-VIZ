dist_matrix %>%
filter(feature %in% gene_names) %>%
select(contains("AFUA")) %>%
replace_na(Inf)
list(gene_names = Inf)
gene_names
list(gene_names[:] = Inf
gene_nams = INF
gene_names = Inf
gene_names
replicate(35, Inf)
inf_vec <- replicate(length(gene_name), Inf)
names(inf_vec) <- gene_names
inf_vec
inf_vec <- replicate(length(gene_name), Inf)
inf_vec
names(inf_vec) = gene_names
inf_vec
gene_names
D <- getDistMatrix(Net, gene_list)
gene_names <- D[[1]]
inf_vec <- replicate(length(gene_name), Inf)
names(inf_vec) <- gene_names
gene_names <- D[[1]]
gene_names
gene_list
D <- getDistMatrix(Net, gene_list)
gene_names <- D[[1]]
gene_names
D[[1]]
gene_id <- Net %>%
filter(feature %in% gene_list) %>%
pull(id)
gene_name <- Net %>%
filter(feature %in% gene_list) %>%
pull(feature)
D <- getDistMatrix(Net, gene_list)
gene_name <- D[[1]]
inf_vec <- replicate(length(gene_name), Inf)
names(inf_vec) <- gene_names
inf_vec
dist_matrix %>%
filter(feature %in% gene_names) %>%
select(contains("AFUA")) %>%
replace_na(inf_vec)
dist_matrix %>%
filter(feature %in% gene_names) %>%
select(contains("AFUA")) %>%
replace_na(replace := inf_vec)
dist_matrix %>%
filter(feature %in% gene_names) %>%
select(contains("AFUA")) %>%
summarise(min(na.rm = TRUE))
min(dist_matrix$AFUA_8G00540, na.rm = Fa)
min(dist_matrix$AFUA_8G00540, na.rm = TRUE)
dist_matrix %>%
mutate_all(replace(., is.na(.), Inf))
dist_matrix %>%
filter(feature %in% gene_names) %>%
select(contains("AFUA")) %>%
mutate_all(~, replace(., is.na(.), Inf))
dist_matrix %>%
filter(feature %in% gene_names) %>%
select(contains("AFUA")) %>%
replace(is.na(.), Inf)
dist_matrix
forceNetwork(Links = sub_net_edges, Nodes = sub_net_nodes, Source = "from", Target = "to", NodeID = "feature", Group = "module", Value = "weight", opacity = 5, fontSize = 30, zoom = TRUE)
View(Module)
View(Module)
gene_list<- searchForModule(Modules, 5463)
gene_list<- searchForModule(Module, 5463)
gene_list
rm(list =ls())
load('net_data.Rdata')
source('asp_aux_functions.R')
MyClickScript <- 'Shiny.setInputValue("node_name", d.name)'
pwd()
wd()
setwd('AsperNet/'
)
load('net_data.Rdata')
source('asp_aux_functions.R')
MyClickScript <- 'Shiny.setInputValue("node_name", d.name)'
S<-goSubgraph(Module, enrich_2_module, "pathogenesis")
S
library(ggraph)
ggraph(S, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
S %N>%
filter(degree > 0)
source('asp_aux_functions.R')
S <- goSubgraph(Net %N>% filter(degree > 0), Module, enrich_2_module, "pathogenesis")
S
ggraph(S, layout, 'fr', weights = "weight") + geom_edge_link() + geom_node_point()
ggraph(S, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
dist_matrix<-getDistMatrix(Net, S %N>% as_tibble() %>% pull(feature))`
dist_matrix<-getDistMatrix(Net, S %N>% as_tibble() %>% pull(feature))
dist_matrix
view(dist_matrix)
dist_matrix %>% select("AFUA_6G00660")
dist_matrix %>% select("AFUA_6G00660") %>% filter(is.na(.) == FALSE)
dist_matrix %>% select("feature","AFUA_6G00660") %>% filter(is.na(.) == FALSE)
dist_matrix %>% select("feature","AFUA_6G00660") %>% filter(is.na("AFUA_6G00660") == FALSE)
dist_matrix %>% select("feature","AFUA_6G00660") %>% filter("AFUA_6G00660", is.na(".") == FALSE)
Stiener <- buildSteinerTrees(Net, S %N>% as_tibble() %>% pull(feature))
ggraph(Steiner, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point())
ggraph(Stiener, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point())
ggraph(Stiener, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
S <- S %E>%
mutate(is_stiener = FALSE) %N>%
mutate(is_stiener = FALSE) %>%
mutate(.tidygraph_node_index = NULL)
S_tables <- graph2NodeEdgeTables(S)
S_nodes <- S_tables[[1]]
S_edges <- S_tables[[2]]
Stiener <- buildSteinerTrees(Net, S_nodes$feature)
Stiener <- Stiener %E>%
mutate(is_stiener = TRUE) %N>%
mutate(is_stiener = TRUE)
subgraph_and_Stiener <- graph_join(S, Stiener)
stiener_tables <- graph2NodeEdgeTables(subgraph_and_Stiener)
stiener_nodes <- stiener_tables[[1]]
stiener_edges <- stiener_tables[[2]]
ggraph(subgraph_and_Stiener, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
ggraph(Stiener, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
Stiener
debugSource('~/AsperNet/asp_aux_functions.R')
Stiener <- buildSteinerTrees(Net, S %N>% as_tibble() %>% pull(feature))
path_2_add
Stiener
stiener_tree
steiner_tree
path_2_add<-dist2graph %>%
path_2_add
S
debugSource('~/AsperNet/asp_aux_functions.R')
S
goSubgraph(Net, Module, enrich_2_module, "pathogenesis")
S <- goSubgraph(Net, Module, enrich_2_module, "pathogenesis")
S_nodes <- S %N>% as_tibble()
view(S_nodes)
all.equal(S_nodes$id, S_nodes$.tidygraph_node_index)
Net
Net
Net %N>% filter(id == 11)
Net %N>% filter(id %in% c(11, 34)
)
debugSource('~/AsperNet/asp_aux_functions.R')
debugSource('~/AsperNet/asp_aux_functions.R')
debugSource('~/AsperNet/asp_aux_functions.R')
Stiener <- buildStienerTrees(Net, S %N>% as_tibble() %>% pull(feature))
debugSource('~/AsperNet/asp_aux_functions.R')
View(buildStienerTrees)
rm buildSteinerTrees
rm(buildSteinerTrees)
debugSource('~/AsperNet/asp_aux_functions.R')
debugSource('~/AsperNet/asp_aux_functions.R')
debugSource('~/AsperNet/asp_aux_functions.R')
Stiener <- buildStienerTrees(Net, S %N>% as_tibble() %>% pull(feature))
view(stiener_tree)
stiener_tree <- stiener_tree %>%
stiener_tree <- stiener_tree %>%
view(stiener_tree)
stiener_tree
path_2_add
stiener_tree
steiner
stiener_tree
dist2graph
view(dist2graph)
stiener_tree
stiener_tree
stiener_tree
stiener_tree
stiener_tree
dist2graph
stiner_tree
stiener_tree
dist2graph
d
dist2graph
view(dist2graph)
dist2graph
view(dist2graph)
view(dist2graph)
dist2graph
dist2graph
view(dist2graph)
view(dist2graph)
stiener_tree
stiener_tree
view(dist2graph)
dist2graph
view(dist2graph)
dist2graph
view(dist2graph)
path_2_add
path
Path
stiener_tree %>% filter(feature %in% path %N>% as_tibble() %>% pull(feature))
stiener_tree %>% filter(feature %in% (path %N>% as_tibble() %>% pull(feature)))
stiener_tree %>% filter(feature %in% (Path %N>% as_tibble() %>% pull(feature)))
stiener_tree
view(ddist2graph))
view(dist2graph)
v
view(dist2graph)
view(dist2graph)
c
view(dist2graph)
view(dist2graph)
c
c
c
n
debugSource('~/AsperNet/asp_aux_functions.R')
Stiener <- buildStienerTrees
Stiener <- buildStienerTrees(Net, S %N>% as_tibble() %>% pull(feature))
Stiener <- buildStienerTrees(Net, S %N>% as_tibble() %>% pull(feature))
S %N>% as_tibble() %>% pull(feature)
Stiener <- buildStienerTrees(Net, S %N>% as_tibble() %>% pull(feature))
debugSource('~/AsperNet/asp_aux_functions.R')
Stiener <- buildStienerTrees(Net, S %N>% as_tibble() %>% pull(feature))
view(dist2graph)
stiener_tree
ggplot(stiener_tree, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
ggraph(stiener_tree, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
stiener_tree %E>% filter(feature == "AFUA_5G01900_nca")
stiener_tree %N>% filter(feature == "AFUA_5G01900_nca")
stiener_tree %E>% filter(id == "AFUA_5G01900_nca")
stiener_tree %E>% filter(id == 9882)
view(dist_matrix)
dist_matrix %>% filter(is.na(.) ==FALSE)
for(i in 2:length(restrict_dist_matrix)){
gene <- colnames(restrict_dist_matrix[i])
idx <-which(dist2graph$gene_names == gene)
if(all(is.na(restrict_dist_matrix[i]))){
dist2graph$Closest[idx[1]] <- gene
dist2graph$Dist[idx[1]] <- length(dist_matrix$feature)+1
}else{
dist <- min(restrict_dist_matrix[i], na.rm = TRUE)
match_idx <- which(restrict_dist_matrix[i] == min(restrict_dist_matrix[i], na.rm = TRUE))
closest <- restrict_dist_matrix$feature[match_idx[1]]
dist2graph$Dist[idx[1]] <- dist
dist2graph$Closest[idx[1]] <- closest
}
}
view(dist2graph)
Stiener
ggraph(graph, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
ggraph(Stiener, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
Steiner %>%
convert(to_components)
Stiener %>%
convert(to_components)
C,- Stiener %>%
C, <- Stiener %>%
C <- Stiener %>%
convert(to_components)
C
ggraph(C, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
view(dist_matrix)
Stiener %>%
convert(to_subcomponent, "AFUA_5G01900_nca")
Stiener %>% filter(feature == "AFUA_5G01900_nca")
Stiener %>%
convert(to_subcomponent, 9882)
View(Stiener)
View(Stiener)
Steiner_nodes <- Steiner %N>% as_tibble()
Steiner_nodes <- Stiener %N>% as_tibble()
Stiener_edges <- Stiener %E>% as_tibble()
Stiener_nodes <- Stiener %N>% as_tibble()
view(Stiener_nodes)
Stiener %>%
convert(to_local_neighborhood, 9882)
Stiener %>% convert(to_local_neighborhood, 9882)
Stiener %>% convert(to_minimum_spanning_tree, 9882 )
Stiener %>% convert(to_minimum_spanning_tree)
Stiener_nodes
view(Stiener_nodes)
Steiner %E>% filter(to == 129)
Stiener %E>% filter(to == 129)
Stiener %E>% filter(from == 129)
Stiener %E>% filter(to == 129)
graph_join(S, Stiener, copy =TRUE)
S
sub_graph_STiener <- graph_join(S, Stiener, copy =TRUE)
ggraph(S, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
ggraph(sub_graph_STiener, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
sub_graph_STiener <- graph_join(S, Stiener, copy =False)
ggraph(sub_graph_STiener, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
Stiener <- buildStienerTrees(Net, S%N>% as_tibble() %>% pull(feature))
Stiener <- buildStienerTrees(Net, S %N>% as_tibble() %>% pull(feature))
Stiener <- Stiener %E>%
mutate(is_stiener = TRUE) %N>%
mutate(is_stiener = TRUE)
subgraph_and_Stiener <- graph_join(S, Stiener)
subgraph_and_Stiener
ggraph(subgraph_and_Stiener, layout = 'fr', weights = weight) +
geom_edge_link() +
geom_node_point()
stiener_tables <- graph2NodeEdgeTables(subgraph_and_Stiener)
stiener_nodes <- stiener_tables[[1]]
stiener_edges <- stiener_tables[[2]]
stiener_edges <- stiener_edges %>%
mutate(color_code = if_else(is_stiener, "#FF0000", "#666")) %>%
add_row(from = 0, to = 0, weight = 0)
forceNetwork(Links = stiener_edges, Nodes = stiener_nodes,
Source = "from", Target = "to",
Value = "weight", NodeID = "feature",
Group = "module", linkColour = stiener_edges$color_code,
opacity = 1, zoom = TRUE, fontSize=40,
charge = -10, clickAction = MyClickScript)
library(networkD3)
stiener_tables <- graph2NodeEdgeTables(subgraph_and_Stiener)
stiener_nodes <- stiener_tables[[1]]
stiener_edges <- stiener_tables[[2]]
stiener_edges <- stiener_edges %>%
mutate(color_code = if_else(is_stiener, "#FF0000", "#666")) %>%
add_row(from = 0, to = 0, weight = 0)
forceNetwork(Links = stiener_edges, Nodes = stiener_nodes,
Source = "from", Target = "to",
Value = "weight", NodeID = "feature",
Group = "module", linkColour = stiener_edges$color_code,
opacity = 1, zoom = TRUE, fontSize=40,
charge = -10, clickAction = MyClickScript)
stiener_edges %>%
mutate(is_stiener = NA = FALSE)
mutate(is_stiener = replace(., is_stiener == NA, FALSE))
stiener_edges %>% replace_na(list('FALSE', 'FALSE', 'FALSE', 'FALSE', 'FALSE'))
stiener_edges <- stiener_tables[[2]]
stiener_edges <- mutate(is_stiener = replace_na(is_stiener, FALSE))
stiener_edges
stiener_edges %>% mutate(is_stiener = replace_na(is_stiener, FALSE))
stiener_edges <- stiener_edges %>%
mutate(is_stiener = replace_na(is_stiener, FALSE))
mutate(color_code = if_else(is_stiener, "#FF0000", "#666")) %>%
add_row(from = 0, to = 0, weight = 0)
stiener_edges <- stiener_edges %>%
mutate(is_stiener = replace_na(is_stiener, FALSE)) %>%
mutate(color_code = if_else(is_stiener, "#FF0000", "#666")) %>%
add_row(from = 0, to = 0, weight = 0)
forceNetwork(Links = stiener_edges, Nodes = stiener_nodes,
Source = "from", Target = "to",
Value = "weight", NodeID = "feature",
Group = "module", linkColour = stiener_edges$color_code,
opacity = 1, zoom = TRUE, fontSize=40,
charge = -10, clickAction = MyClickScript)
shiny::runApp()
runApp()
runApp()
?strrep
strrep()?
strrep?
?strrep
?str_replace
node_name <- "AFUA_5G01900_nca"
printNodeInfo(Net, node_name, '<br/>', '\n')
str_replace(printNodeInfo(Net, node_name), '<br/>', '\n')
str_replace(printNodeInfo(Net, node_name), '<br/>', '\n')
str_replace_all(printNodeInfo(Net, node_name), '<br/>', '\n')
runApp()
install.packages("SparkR")
runApp()
write(str_replace_all(printNodeInfo(Net, node), '<br/>', '\n'), "test.txt")
write(str_replace_all(printNodeInfo(Net, node_name), '<br/>', '\n'), "test.txt")
runApp()
runApp()
runApp()
module_id <- 4569
printModuleInfo(Net, Module, module_id, list())
str_replace_all(printModuleInfo(Net, Module, module_id_info(), list()), '<br/>', '\n')
str_replace_all(printModuleInfo(Net, Module, module_id, list()), '<br/>', '\n')
str_replace_all(printModuleInfo(Net, Module, module_id_info(), list()), c('<br/>', '&emsp'), c('\n', '\t'))
str_replace_all(printModuleInfo(Net, Module, module_id, list()), c('<br/>', '&emsp'), c('\n', '\t'))
runApp()
basename('linux.txt')
library(tools)
file_path_sans_ext(basename(linux.txt))
file_path_sans_ext(basename('asper/linux.txt'))
runApp()
Net
rm(list =ls())
runApp()
runApp()
runApp()
runApp()
runApp()
load('net_data.Rdata')
source('asp_aux_functions.R')
runApp()
sub_net <- goSubgraph(Net, Module, enrich_2_module, "asexual sporulation")
sub_net
printAllModuleInfo(sub_net, Module, list())
source('~/AsperNet/asp_aux_functions.R')
printAllModuleInfo(sub_net, Module, list())
source('~/AsperNet/asp_aux_functions.R')
printAllModuleInfo(sub_net, Module, list())
runApp()
printAllModuleInfo(sub_net, Module, list())
str_replace_all(printAllModuleInfo(sub_net, Module, list()), c('<br/>', '&emsp'), c('\n', '\t'))
printAllModuleInfo(sub_net, Module, list())
text_info<- sprintf('%s %s', text_info, printModuleInfo(Module, id, list()))
runApp()
sub_net <- goSubgraph(Net, Module, enrich_2_module, "pathogenesis")
sub_net
printAllModuleInfo(sub_net, Module, list())
source('~/AsperNet/asp_aux_functions.R')
printAllModuleInfo(sub_net, Module, list())
str_replace_all(printAllModuleInfo(sub_net, Module, list()), c('<br/>', '&emsp'), c('\n', '\t'))
runApp()
which()
genes
source('~/AsperNet/asp_aux_functions.R')
all_nodes_file <- "/Volumes/wid/projects7/Roy-Aspergillus/Results/RnaSeq/NcaResults/Output_20211122111849/Lambda_0100/Merlinp_inputs/net1_nodes.txt"
edge_list_file <- "/Volumes/wid/projects7/Roy-Aspergillus/Results/RnaSeq/MerlinpResults/Afum_RnaSeq_results/Condor_results/PostBatchCorr_I02/Lambda_0100/output_net_0_8.txt"
module2gene_file <- "/Volumes/wid/projects7/Roy-Aspergillus/Results/RnaSeq/MerlinpResults/Afum_RnaSeq_results/Condor_results/PostBatchCorr_I02/Lambda_0100/consensus_module_0_3_geneset.txt"
module_file <- "/Volumes/wid/projects7/Roy-Aspergillus/Results/RnaSeq/MerlinpResults/Afum_RnaSeq_results/Condor_results/PostBatchCorr_I02/Lambda_0100/consensus_module_0_3_geneset_enrichAnalyzer.txt"
go_file = "/Volumes/wid/projects7/Roy-Aspergillus/Data/GeneOntology/GO_enrichAnalyzer_idx/afumgotermap.txt"
regulator_enrich_file <- "/Volumes/wid/projects7/Roy-Aspergillus/Results/RnaSeq/MerlinpResults/Afum_RnaSeq_results/Condor_results/PostBatchCorr_I02/Lambda_0100/Enrichments/merlin.0_8.0_3_details.txt"
go_enrich_file <- "/Volumes/wid/projects7/Roy-Aspergillus/Results/RnaSeq/MerlinpResults/Afum_RnaSeq_results/Condor_results/PostBatchCorr_I02/Lambda_0100/Enrichments/go.0_3_details.txt"
makePostProcessDataStruct(all_nodes_file, edge_list_file,
module2gene_file, go_file, module_file,
regulator_enrich_file, go_enrich_file)
rm(list =ls())
load('net_data.Rdata')
source('asp_aux_functions.R')
genes
which(contains(genes, "nca"))
which(str_contains(genes, "nca))
which(str_contains(genes, "nca"))
which(grepl("nca", genes))
idx <- whcih(grepl("nca", genes))
idx <- which(grepl("nca", genes))
idx
idx
idx
genes[idx]
gene_list <- c("AFUA_5G01900_nca", "AFUA_3G11330_nca")
gene_list
gene_list <- c("AFUA_5G01900", "AFUA_3G11330")
which(grepl(gene_list, genes))
which(gene_list %in% genes))
which(gene_list %in% genes)
which(genes %like% gene_list)
library(data.table)
which(gene_list %like% genes)
str_detect(genes, gene_list)
str_detect(genes, gene_list[1]|gene_list[2])
gene_list
str_detect(genes, "AFUA_5G01900|AFUA_3G11330")
which(str_detect(genes, "AFUA_5G01900|AFUA_3G11330"))
paste(gene_list)
paste(unlist(gene_list), sep="|')
paste(unlist(gene_list), sep="|")
unlist(gene_list)
paste(unlist(gene_list), sep="|")
paste(unlist(gene_list), sep="|")
paste(unlist(gene_list), collapse="|")
Net %N>%
filter(str_detect(feature, paste(unlist(gene_list), collapse="|")))
runApp()
runApp()
runApp()
?selectizeInput
rm(list=ls())
runApp()
setwd('.')
load('net_data.Rdata')
source('asp_aux_functions.R')
MyClickScript <- 'Shiny.setInputValue("node_name", d.name)'
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/AsperNet/asp_aux_functions.R')
runApp()
runApp()
